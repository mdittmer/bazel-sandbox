load("//:providers.bzl", "MyCustomInfo")

def _my_custom_rule_impl(ctx):
    srcs = [file for files in [
        src.files.to_list()
        for src in ctx.attr.srcs
    ] for file in files]

    # Rule generates an extra file not included in "custom_files".
    # This is the desired pattern, as the test does not care about
    # all files generated by this rule.
    stamp_path = "{}.stamp".format(ctx.label.name)
    stamp_file = ctx.actions.declare_file(stamp_path)

    custom_files = []
    for src in srcs:
        custom_file = ctx.actions.declare_file("{}.generated".format(
            src.basename,
        ))
        ctx.actions.write(custom_file, "")
        custom_files.append(custom_file)
    ctx.actions.write(stamp_file, "")

    outs = [stamp_file] + custom_files
    return [
        DefaultInfo(files = depset(outs)),
        MyCustomInfo(
            custom_data = custom_files,
        ),
    ]

my_custom_rule = rule(
    implementation = _my_custom_rule_impl,
    attrs = {
        "srcs": attr.label_list(
            allow_files = True,
            mandatory = True,
        ),
    },
)

def _my_custom_test_impl(ctx):
    custom_files = []
    for custom_rule in ctx.attr.custom_rules:
        custom_files += custom_rule[MyCustomInfo].custom_data
    runfiles = ctx.runfiles(custom_files)
    test_script_file = ctx.actions.declare_file("{}.sh".format(ctx.label.name))
    test_script_contents = """
find .
"""
    for custom_file in runfiles.files.to_list():
        test_script_contents += """
if [[ ! -f "{custom_file}" ]]; then
    >&2 echo "Dependency output file {custom_file} is missing";
    exit 1;
fi
if [[ -s "{custom_file}" ]]; then
    >&2 echo "Dependency output file {custom_file} is not empty";
    exit 1;
fi
""".format(custom_file = custom_file.short_path)
    ctx.actions.write(test_script_file, test_script_contents, is_executable = True)
    outs = [test_script_file]
    return [DefaultInfo(
        files = depset(outs),
        executable = test_script_file,
        runfiles = runfiles,
    )]

my_custom_test = rule(
    test = True,
    implementation = _my_custom_test_impl,
    attrs = {
        "custom_rules": attr.label_list(
            mandatory = True,
            providers = [MyCustomInfo],
        ),
    },
)
